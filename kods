import requests # Bibliotēka, kas ļauj sūtīt HTTP pieprasījumus uz interneta lapām
from bs4 import BeautifulSoup # Bibliotēka, kas palīdz saprast un nolasīt HTML saturu 
from datetime import datetime # Importē datuma un laika rīkus
import random # Bibliotēka, kas ļauj izdarīt nejaušas darbības – piem., izvēlēties nejaušu citātu

BASE_URL = "https://quotes.toscrape.com" # Galvenā vietne, no kuras tiks iegūti citāti, autori un tagi

def preload_all_data(): # Funkcija, kas ielādē un saglabā visus datus no vietnes-citātus, autorus, tagus)
    all_data = {
        "authors": {}, # Saglabās autoru vārdus un viņu informāciju
        "quotes": [], # Saglabās visus atrastos citātus
        "tags": set() # Saglabās visus tagus, bez atkārtojumiem
    }
    }
    page = 1 # Sāk ar pirmo lapu
    seen_authors = set() # Saglabās autorus, kurus jau esam apstrādājuši, lai tie nedublētos

    while True:
        res = requests.get(f"{BASE_URL}/page/{page}/") # Nosūta pieprasījumu uz konkrēto lapu ar citātiem 
        if res.status_code != 200: # Pārtrauc ciklu, ja atbildes kods nav 200
            break
        soup = BeautifulSoup(res.content, "html.parser") # Izveido HTML dokumenta "lasāmu" versiju, ko Python var saprast un pārmeklēt
        
        for quote_div in soup.find_all("div", class_="quote"): # Atrod visus citātu blokus lapā – katrs citāts ir ievietots <div> ar klasi "quote"
            text = quote_div.find("span", class_="text").text  # Iegūst citāta tekstu no <span> ar klasi "text"
            author = quote_div.find("small", class_="author").text.strip() # Iegūst autora vārdu no <small> ar klasi "author" un noņem liekās atstarpes
            tags = [tag.text.strip() for tag in quote_div.find_all("a", class_="tag")] # Atrod visus tagus šim citātam un saglabā tos kā sarakstu,noņem liekās atstarpes
            all_data["quotes"].append({
                "text": text,
                "author": author,
                "tags": tags
            }) # Saglabā šo citātu, autoru un tagus kopējā sarakstā "quotes"
            all_data["tags"].update(tags) # Pievieno visus tagus kopējam tagu sarakstam, lai nav dublikātu

            if author not in seen_authors: # Ja šis autors vēl nav apskatīts
                seen_authors.add(author) # Pievieno autoru sarakstam, kas jau ir apskatīti, lai neskatās atkārtoti
                link = quote_div.find("a", href=lambda href: href and href.startswith("/author/")) # Atrod saiti uz autora profila lapu
                if link: # Ja saite eksistē...
                    author_page = requests.get(BASE_URL + link["href"]) # ...atver autora profila lapu
                    if author_page.status_code == 200: # Ja lapa tika veiksmīgi ielādēta...
                        author_soup = BeautifulSoup(author_page.content, "html.parser") # Izveido viegli pārskatāmu HTML struktūru no lapas satura
                        try:
                            birth_date = author_soup.find(class_="author-born-date").text # Atrod autora dzimšanas datumu
                            birth_place = author_soup.find(class_="author-born-location").text # Atrod vietu, kur autors dzimis
                            description = author_soup.find("div", class_="author-description").text.strip() # Atrod īsu aprakstu par autoru
                            birth_date_obj = datetime.strptime(birth_date, "%B %d, %Y")  # Pārveido dzimšanas datumu no teksta uz datuma formātu
                            all_data["authors"][author] = {
                                "birth_date": birth_date_obj,
                                "birth_str": birth_date,
                                "birth_place": birth_place,
                                "description": description
                            }
                        except Exception:
                            continue # Ja rodas kāda kļūda, piemēram, kaut kas nav atrodams, tad vienkārši pāriet pie nākamā autora
        if not soup.find("li", class_="next"): # Pārtrauc ciklu, ja nav "next" lapa
            break
        page += 1 # Ja ir nākamā lapa, tad palielina lapas numuru un turpina ciklu

    all_data["tags"] = sorted(all_data["tags"]) # Sakārto visus atrastos tagus alfabētiskā secībā un saglabā tos atpakaļ datu struktūrā
# Pirms tam "tags" bija kopums (set), bet tagad tas kļūst par sarakstu (list), kur viss ir sakārtots
    return all_data # Atgriež visus savāktos datus — citātus, autoru informāciju un tagus 

# ==== Funkcijas, kas izmanto ielādētos datus ====

def get_all_authors(data):
    return sorted(data["authors"].keys())  # Atgriež visu autoru vārdus alfabētiskā secībā

def get_author_quotes(data, author_name):
    return [q["text"] for q in data["quotes"] if q["author"].lower() == author_name.lower()] # Atgriež visus konkrētā autora citātus, teksta veidā

def get_quotes_by_tag(data, tag):
    return [q["text"] for q in data["quotes"] if tag in q["tags"]] # Atgriež visus citātus, kuriem ir norādītais tags

def get_author_info(data, author_name):
    return data["authors"].get(author_name) # Atgriež informāciju par autoru

def get_sorted_authors_by_birth(data):
    return sorted(data["authors"].items(), key=lambda x: x[1]["birth_date"]) # Atgriež visus autorus sakārtotus pēc dzimšanas datuma (no vecākā uz jaunāko)

def get_random_quote(data):
    return random.choice(data["quotes"]) # Atgriež nejauši izvēlētu citātu no visiem pieejamajiem

def search_quotes_by_keyword(data, keyword):
    return [q for q in data["quotes"] if keyword.lower() in q["text"].lower()] # Atgriež visus citātus, kuros tekstā ir meklētais vārds

# ==== CLI ====

print("Datu ielāde...") 
data = preload_all_data() # Izsauc funkciju, kas ielādē visus datus

while True:
    print("1. Citāts pēc autora")
    print("2. Citāts pēc kategorijas")
    print("3. informācija par autoru")
    print("4. Autori no vecākā uz jaunāko")
    print("5. Nejaušs citāts")
    print("6. Citāts pēc atslēgas vārda")
    print("'stop' lai pārtrauktu\n")

    choice = input("Izvēlies opciju (1-6): ").strip().lower()

    if choice == "stop": # Ja lietotājs ieraksta "stop", paziņo, ka programma beidz darbu
        print("Programma pārtraukta.")
        break

    elif choice == "1": # Ja lietotājs izvēlas opciju 1 
        authors = get_all_authors(data) # Iegūst sarakstu ar visiem autoriem no datiem
        for i, a in enumerate(authors, 1): # Iziet cauri autoriem, piešķirot katram numuru no 1
            print(f"{i}. {a}") # Izvada autoru sarakstu ar numuriem
        author_input = input("Ievadi autora vārdu vai numuru: ").strip()
        if author_input.isdigit(): # Ja lietotājs ievadījis skaitli
            idx = int(author_input) - 1 # Pārvērš to par indeksu (jo sarakstā sākas no 0)
            if 0 <= idx < len(authors): # Pārbauda, vai numurs ir derīgs autoru sarakstā
                author_input = authors[idx] # Ja jā, nomaina ievadi uz konkrēto autora vārdu
            else:
                print("Nepareizs numurs.")
                continue # Atgriežas pie sākuma, ļauj izvēlēties vēlreiz
        quotes = get_author_quotes(data, author_input # Iegūst visus citātus pēc autora vārda
        if quotes: # Ja atrasti kādi citāti
            print(f"\nCitāti no {author_input}:") # Izvada paziņojumu par autoru
            for q in quotes: # Iet cauri visiem citātiem
                print(" -", q) # Izvada katru citātu 
        else:
            print("Nav atrasti citāti.")

    elif choice == "2": # Ja lietotājs izvēlas opciju 2
        tags = data["tags"] # Iegūst visus pieejamos tagus no datiem
        for i, tag in enumerate(tags, 1): # Iziet cauri visiem tagiem ar numuriem, sākot no 1
            print(f"{i}. {tag}") # Izvada katru tagu ar numuru priekšā
        tag_input = input("Ievadi tagu vai numuru: ").strip() 
        if tag_input.isdigit(): # Ja ievadīts skaitlis
            idx = int(tag_input) - 1 # Pārvērš to par indeksu (jo sarakstā indeksi sākas no 0)
            if 0 <= idx < len(tags): # Pārbauda, vai šis numurs ir derīgs tagu sarakstā
                tag_input = tags[idx] # Ja jā, aizvieto ievadi ar konkrēto tagu
            else:
                print("Nepareizs numurs.")
                continue # Atgriežas pie cikla sākuma, lai ļautu ievadīt vēlreiz
        quotes = get_quotes_by_tag(data, tag_input) # Iegūst citātus, kas atbilst norādītajam tagam
        if quotes: # Ja atrasti citāti
            print(f"\nCitāti kategorijā '{tag_input}':") # Izvada paziņojumu ar kategorijas nosaukumu
            for q in quotes: # Iet cauri visiem atrastajiem citātiem
                print(" -", q # Izvada katru citātu
        else:
            print("Nav atrasti citāti.")

    elif choice == "3": # Ja lietotājs izvēlas opciju 3
        authors = get_all_authors(data) # Iegūst sarakstu ar visiem autoriem, sakārtotu alfabētiski
        for i, a in enumerate(authors, 1): # Iziet cauri autoru sarakstam ar numuriem, sākot no 1
            print(f"{i}. {a}") # Izvada katra autora vārdu ar numuru priekšā
        author_input = input("Ievadi autora vārdu vai numuru: ").strip()
        if author_input.isdigit(): # Ja ievade ir skaitlis
            idx = int(author_input) - 1 # Pārvērš to par indeksu sarakstā (sākas no 0)
            if 0 <= idx < len(authors): # Pārbauda, vai numurs ir derīgs
                author_input = authors[idx] # Ja derīgs, aizvieto ievadi ar autora vārdu no saraksta
            else:
                print("Nepareizs numurs.")
                continue # Atgriežas pie cikla sākuma, ļauj lietotājam mēģināt vēlreiz
        info = get_author_info(data, author_input) # Iegūst informāciju par autoru pēc viņa vārda
        if info: # Ja informācija ir pieejama
            print(f"\nInformācija par {author_input}:") # Izvada ziņu, par ko būs informācija
            print("Dzimis:", info["birth_str"], info["birth_place"])
            print("Apraksts:", info["description"])
        else:
            print("Autors nav atrasts.")

    elif choice == "4": # Ja lietotājs izvēlas opciju 4
        sorted_authors = get_sorted_authors_by_birth(data) # Iegūst sarakstu ar autoriem sakārtotu pēc dzimšanas datuma
        print("\nAutori no vecākā uz jaunāko:")
        for i, (name, info) in enumerate(sorted_authors, 1): # Iziet cauri sarakstam ar numuriem
            print(f"{i}. {name} (dzimis {info['birth_date'].strftime('%Y-%m-%d')})") # Izvada autora vārdu un dzimšanas datumu formātā GGGG-MM-DD

    elif choice == "5": # Ja izvēlas opciju 5
        quote = get_random_quote(data) # Iegūst nejaušu citātu no datiem
        print("\n Nejaušs citāts:")
        print(f'"{quote["text"]}" — {quote["author"]}') # Izvada citātu un autora vārdu

    elif choice == "6": # Ja izvēlas opciju 6
        keyword = input("Ievadi atslēgvārdu/frāzi: ").strip()
        results = search_quotes_by_keyword(data, keyword) # Meklē citātus, kuros ir šis atslēgvārds/frāze
        if results: # Ja atrasti kādi citāti
            print(f"\nCitāti, kuros parādās '{keyword}':")
            for q in results: # Iziet cauri visiem atrastajiem citātiem
                print(f'- "{q["text"]}" — {q["author"]}') # Izvada katru citātu un tā autoru
        else: 
            print("Netika atrasti citāti ar šo atslēgvārdu.")
